#ifndef COILFIELDCONTROL
#define COILFIELDCONTROL

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Header Files
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "constantValue.h"     // Values of the constants used
#include "s826_subroutine.h"   // s826 board subroutines
#include "vision.h"            // Camera related subroutines
# include "math_subroutine.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function Declaration
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int init_swimmer_thread(void);
int stop_swimmer_actuation_thread(void);

int coilCurrentClear(void);

int init_swimmer_pathFollow(void);
int stop_swimmer_pathFollow(void);

int init_rotate_field_thread(void);
//int stop_rotate_field_thread(void);

int set_swimmerActuationFreq(float freq);

int set_coil_current_to (int index, float d);
float get_coil_current(int index);

int set_swimmer_dirAdjust_angle(float d);
int set_swimmer_dirAdjust_amp(float d);

int set_swimmer_swim_dir_reverse(int d);

int set_directional_index(int d);
int get_directional_index(void);   // Get the driving dir. index

int set_swimmer_h_bias(float d);
int set_swimmer_v_bias(float d);

int set_swimmer_A_h (float d);
int set_swimmer_A_v (float d);

//// Test
int init_swimmerHeadingTest(void);
int stop_swimmerHeadingTest(void);

float get_dirAdjust_angle(void);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: UMultiple Swimmer Test
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int set_swimmer_multiSwimmer(int d);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: UT Follow
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int init_UT_follow (void);
int stop_UT_follow (void);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: Actuation Amplitude Feedback Control
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int set_flag_actuation_A_control (int d);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: Dir. Angle PI Control Parameters
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int set_swimmer_proportional(float d);
int set_swimmer_integral    (float d);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: Swimmer Heading
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float get_swimmer_heading (void);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: Swimming Dir.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int get_swimming_dir(void);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: Multiple Swimmers
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int stop_actuation_field(void);   // Will not stop the thread

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int click_swimmer_magnetizationHeading(void);

int swimmer_series_test(void);

int set_swimmer_actuationAcontrol_low(float d);
int set_swimmer_actuationAcontrol_high(float d);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocols
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int initiate_swimmingSpeedTest(void);   //  Swimming Speed Test
int cilia_buttonToggled (int d);        // cilia test
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol: 2 Agent control Test  ::: Multi-agent control created by Mohammad
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int set_2Agentctrl (int d);             // 2-agent control test enables
int stop_twoagentctrl_field(void);       // Stops the field only and NOT the thread
int set_directional_index_MA(int d);      // Sets field values

#endif
