#include <quadstep.h>


#define num_motors 4
#define num_directions 5
float turn_angle[num_motors];
int turn_steps[num_motors];
int turn_dir[num_motors];
int steps_turned[num_motors];
int step_size = 1; //FULL=1, HALF=2, QUARTER=4, etc
int max_steps = 0;
float init_dir[] = {0, 0, 0, 0};
float fin_dir[num_directions][num_motors] = {
  {45, 45, 45, 45},
  {0, 0, 0, 0},
  {180, 180, 180, 180},
  {270, 270, 30, 30},
  {0, 0, 0, 0},
};

quadstep motor1;
quadstep motor2;
quadstep motor3;
quadstep motor4;

void setup() {
  Serial.begin(9600);

 motor1.set_enable_pin(52);
  motor1.set_direction_pin(40);
  motor1.set_step_pin(38);
  motor1.set_microstep_select_pins(42, 44, 46);

  motor2.set_enable_pin(53);
  motor2.set_direction_pin(41);
  motor2.set_step_pin(39);
  motor2.set_microstep_select_pins(43, 45, 47);

  motor3.set_enable_pin(22);
  motor3.set_direction_pin(34);
  motor3.set_step_pin(36);
  motor3.set_microstep_select_pins(32, 30, 28);

  motor4.set_enable_pin(23);
  motor4.set_direction_pin(35);
  motor4.set_step_pin(37);
  motor4.set_microstep_select_pins(33, 31, 29);

}

void loop() {

  for (int dir_i = 0; dir_i < num_directions; dir_i++) {

    for (int m_i = 0; m_i < num_motors; m_i++) {
      if ( (fin_dir[dir_i][m_i] - init_dir[m_i]) > 180) {
        turn_angle[m_i] = -(360 - ( fin_dir[dir_i][m_i] - init_dir[m_i] ) );
      }
      else if ( (fin_dir[dir_i][m_i] - init_dir[m_i]) < -180) {
        turn_angle[m_i] = 360 + ( fin_dir[dir_i][m_i] - init_dir[m_i] );
      }
      else {
        turn_angle[m_i] = fin_dir[dir_i][m_i] - init_dir[m_i];
      }
      //Serial.println(turn_angle[m_i]);
      turn_steps[m_i] = round(turn_angle[m_i] / 1.8 * step_size);
      //    Serial.print("Steps to Turn");
      //    Serial.println(turn_steps[m_i]);

      if ( abs(turn_steps[m_i]) > max_steps) {
        max_steps = abs(turn_steps[m_i]);
      }
      steps_turned[m_i] = 0; //initialize matrix as all zeros - will be used in next section of code
      turn_dir[m_i] = turn_steps[m_i] / abs(turn_steps[m_i]);
      //    Serial.println(turn_dir[m_i]);
    }
    //  Serial.print("Max Steps");
    //  Serial.println(max_steps);
    //  delay(1000);


    for (int step_i = 0; step_i <= max_steps; step_i++) {

      for (int m_i = 0; m_i < num_motors; m_i++) {
        Serial.println(m_i);
        if ( abs(steps_turned[m_i]) < abs(turn_steps[m_i]) ) {

          if ( m_i == 0 ) {
            motor1.go(FULL, turn_dir[m_i], 10000); //drive motor1
           // Serial.println("Moving Motor 1");
           // delay(1);
          }
          else if ( m_i == 1 ) {
            motor2.go(FULL, turn_dir[m_i], 10000); //drive motor2
            //Serial.println("Moving Motor 2");
           // delay(1);
          }
          else if ( m_i == 2 ) {
            motor3.go(FULL, turn_dir[m_i], 10000); //drive motor3
          }
          else if ( m_i == 3 ) {
            motor4.go(FULL, turn_dir[m_i], 10000); //drive motor4
          }

        steps_turned[m_i] = steps_turned[m_i] + turn_dir[m_i];
        //        Serial.print("Current Step");
        //        Serial.println(steps_turned[m_i]);

      }
    }
  }

  for (int m_i = 0; m_i < num_motors; m_i++) {
    init_dir[m_i] = init_dir[m_i] + steps_turned[m_i] * 1.8 / step_size;
    Serial.println(init_dir[m_i]);
  }
  delay(1000);
}

}