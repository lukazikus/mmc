// ConstantSpeed.pde
// -*- mode: C++ -*-
//
// Shows how to run AccelStepper in the simplest,
// fixed speed mode with no accelerations
/// \author  Mike McCauley (mikem@airspayce.com)
// Copyright (C) 2009 Mike McCauley
// $Id: ConstantSpeed.pde,v 1.1 2011/01/05 01:51:01 mikem Exp mikem $

#include <AccelStepper.h>

//AccelStepper stepper; // Defaults to AccelStepper::FULL4WIRE (4 pins) on 2, 3, 4, 5

int switch_pin = 10;

// outx = pins: {step, dir, enable, microstep 1, ms2, ms3}
int out1[6] = {38, 40, 52, 42, 44, 46};
int out2[6] = {39, 41, 53, 43, 45, 47};
int out3[6] = {36, 34, 22, 32, 30, 28};
int out4[6] = {37, 35, 23, 33, 31, 29};

AccelStepper stepper1(1, out1[0], out1[1]);
AccelStepper stepper2(1, out2[0], out2[1]);
AccelStepper stepper3(1, out3[0], out3[1]);
AccelStepper stepper4(1, out4[0], out4[1]);

int var1;
float max_speed = 10000; //1000,2500,3400,3600 - 3800,4200,5000
//3600
float max_accel = 16000; //140000, 160000 (124) - 200000
//4200 for "straight-away" acceleration (doesn't reach max accel when doing tight turns)
float pos1 = 0 * 400 / 360;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const long int num_positions = 100;
const int num_motors = 4;
float pos2[num_positions][num_motors] = { 
{-64.42, 157.40, 134.22, 3.70},
{-90.32, 190.38, 154.50, -6.53},
{-81.70, 203.23, 173.27, -11.91},
{-57.44, 178.80, 149.35, 4.36},
{-92.89, 202.78, 153.69, -6.91},
{-45.93, 180.55, 145.87, 12.13},
{-55.86, 205.00, 168.00, 7.40},
{-94.54, 235.36, 175.39, -1.25},
{-60.18, 225.53, 180.80, 4.65},
{-25.61, 191.08, 148.20, 21.46},
{-71.44, 254.98, 193.38, 2.74},
{-85.84, 263.41, 189.05, 1.85},
{-70.32, 290.75, 200.69, 17.11},
{-28.88, 235.55, 184.97, 16.10},
{-27.93, 241.35, 186.39, 20.26},
{-44.02, 263.66, 196.91, 9.62},
{-39.20, 265.15, 201.26, 9.15},
{19.32, 226.58, 184.21, 67.36},
{-32.86, 305.81, 202.13, 31.03},
{-27.76, 291.73, 201.78, 24.98},
{-0.05, 258.77, 200.27, 35.12},
{4.50, 285.75, 208.44, 54.94},
{11.35, 260.90, 206.81, 36.42},
{25.17, 269.29, 199.65, 56.86},
{34.21, 263.18, 197.68, 58.16},
{41.43, 266.30, 202.69, 66.86},
{28.14, 288.67, 210.25, 55.19},
{37.31, 297.88, 208.61, 68.82},
{45.13, 286.89, 213.99, 69.12},
{57.46, 284.16, 214.79, 80.74},
{106.86, 273.94, 203.10, 118.58},
{63.25, 300.89, 219.62, 90.80},
{62.90, 312.34, 224.38, 95.00},
{71.73, 270.17, 240.33, 155.71},
{67.03, 321.81, 233.16, 114.89},
{108.11, 316.80, 217.08, 106.61},
{73.73, 315.14, 248.89, 147.88},
{112.51, 293.87, 240.04, 150.78},
{82.60, 291.84, 271.86, 170.63},
{110.84, 315.60, 249.15, 157.52},
{124.97, 335.06, 225.26, 143.89},
{99.29, 304.63, 290.82, 182.32},
{94.39, 326.14, 299.94, 178.55},
{71.07, 353.51, 293.22, 174.60},
{98.66, 345.25, 321.75, 180.97},
{107.32, 345.69, 318.32, 184.92},
{137.50, 351.19, 245.33, 162.26},
{123.62, 347.35, 331.97, 193.20},
{127.11, 362.63, 338.63, 187.36},
{138.74, 346.20, 330.50, 205.41},
{103.87, 383.96, 346.35, 192.80},
{157.79, 318.73, 375.36, 342.20},
{119.81, 392.63, 356.01, 197.45},
{130.08, 401.99, 372.71, 194.05},
{106.68, 411.30, 362.21, 194.02},
{118.70, 425.67, 381.41, 195.13},
{145.14, 408.52, 370.03, 205.34},
{171.57, 424.58, 206.89, 168.99},
{156.52, 412.81, 372.06, 210.61},
{183.74, 423.23, 215.89, 176.72},
{171.24, 412.33, 371.88, 217.48},
{179.10, 414.39, 371.05, 227.57},
{152.37, 449.20, 390.33, 210.51},
{169.34, 438.55, 392.48, 214.48},
{153.74, 461.95, 396.49, 209.02},
{129.19, 477.63, 397.68, 198.05},
{169.79, 462.06, 397.38, 215.99},
{160.59, 484.88, 403.31, 214.57},
{189.57, 458.58, 395.03, 227.56},
{228.10, 434.53, 381.29, 259.39},
{247.83, 445.17, 234.27, 209.20},
{270.24, 438.24, 251.24, 223.20},
{217.74, 463.33, 401.34, 245.20},
{234.65, 458.45, 399.51, 259.69},
{218.01, 482.01, 406.02, 245.03},
{234.80, 481.19, 406.78, 264.78},
{258.20, 469.05, 397.86, 276.18},
{235.00, 512.16, 413.80, 278.29},
{259.93, 484.93, 412.98, 293.74},
{243.63, 515.67, 420.10, 291.94},
{246.03, 527.96, 421.76, 303.66},
{293.22, 480.17, 412.18, 312.57},
{279.18, 504.83, 422.78, 297.25},
{268.66, 522.15, 428.02, 301.76},
{291.36, 476.62, 437.01, 345.55},
{306.91, 495.24, 430.10, 337.13},
{271.81, 525.75, 448.59, 341.66},
{298.40, 510.65, 445.65, 352.01},
{298.40, 510.65, 445.65, 352.01},
{326.25, 547.46, 404.62, 317.97},
{326.25, 547.46, 404.62, 317.97},
{282.14, 539.87, 495.25, 370.44},
{282.14, 539.87, 495.25, 370.44},
{282.14, 539.87, 495.25, 370.44},
{322.46, 487.91, 528.93, 422.06},
{322.46, 487.91, 528.93, 422.06},
{331.99, 527.41, 523.55, 395.20},
{331.99, 527.41, 523.55, 395.20},
{331.99, 527.41, 523.55, 395.20},
{331.99, 527.41, 523.55, 395.20},
}; //in "steps" ie degrees*400/360
boolean check_motor[num_motors]={0, 0, 0, 0, };
int num_stoppedmotors = 0;
int position_index = -1;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//long time1;
//long time2;

void setup()
{

  Serial.begin(9600);
  stepper1.setMaxSpeed(max_speed);
  // stepper1.setSpeed(500.0);
  stepper1.setAcceleration(max_accel);

  stepper2.setMaxSpeed(max_speed);
  // stepper2.setSpeed(500.0);
  stepper2.setAcceleration(max_accel);
  //  //  stepper2.srtEnablePin(53);
  //  //  stepper2.enableOutputs();

  stepper3.setMaxSpeed(max_speed);
  // stepper2.setSpeed(500.0);
  stepper3.setAcceleration(max_accel);

  stepper4.setMaxSpeed(max_speed);
  // stepper2.setSpeed(500.0);
  stepper4.setAcceleration(max_accel);

  pinMode(switch_pin, INPUT);

  for (int i = 2; i < 6; i++)
  {
    // i == 2 -> set enable pin to low (activates it) if its high, motor wont run
    //           also sets motors to full stall current when not steppin
    // i == 3-5 ->set microstep pins high or low - will change size of step
    pinMode(out1[i], OUTPUT);
    digitalWrite(out1[i], LOW);

    pinMode(out2[i], OUTPUT);
    digitalWrite(out2[i], LOW);

    pinMode(out3[i], OUTPUT);
    digitalWrite(out3[i], LOW);

    pinMode(out4[i], OUTPUT);
    digitalWrite(out4[i], LOW);

    if (i == 3)
    {
      digitalWrite(out1[i], HIGH);
      digitalWrite(out2[i], HIGH);
      digitalWrite(out3[i], HIGH);
      digitalWrite(out4[i], HIGH);
    }
  }
  //  stepper2.srtEnablePin(53);
  //  stepper2.enableOutputs();

  while (digitalRead(switch_pin) == 0)
  {
    Serial.println("Wait");
    //wait until switch is flipped to start
  }
  stepper1.moveTo(pos1);
  stepper2.moveTo(pos1);
  stepper3.moveTo(pos1);
  stepper4.moveTo(pos1);

//  time1 = millis();
}

void loop()
{

  stepper1.run();
  stepper2.run();
  stepper3.run();
  stepper4.run();

  //const long int num_positions = 1;
  //const int num_motors = 4;
  //long int pos2[num_positions][num_motors] = {
  //   {45, 90, 135, 180},
  //};
  //// in "steps" ie degress * 400/360
  //int num_stoppedmotors=0;
  //int position_index=-1;


  if (stepper1.distanceToGo() == 0 && check_motor[0] == 0)
  {
    num_stoppedmotors++;
    check_motor[0] = 1;
  }

  if (stepper2.distanceToGo() == 0 && check_motor[1] == 0)
  {
    num_stoppedmotors++;
    check_motor[1] = 1;
  }

  if (stepper3.distanceToGo() == 0 && check_motor[2] == 0)
  {
    num_stoppedmotors++;
    check_motor[2] = 1;
  }

  if (stepper4.distanceToGo() == 0 && check_motor[3] == 0)
  {
    num_stoppedmotors++;
    check_motor[3] = 1;
  }

  if (num_stoppedmotors == num_motors)
  {
    if (position_index < num_positions - 1)
      position_index++;
      
    delay(100);

    stepper1.moveTo(pos2[position_index][0]);
    stepper2.moveTo(pos2[position_index][1]);
    stepper3.moveTo(pos2[position_index][2]);
    stepper4.moveTo(pos2[position_index][3]);


    num_stoppedmotors = 0;
    for (int i = 0; i < 4; i++)
    	check_motor[i] = 0;
  }

  while (digitalRead(switch_pin) == 0)
  {
    // disable motors
    digitalWrite(out1[2], HIGH);
    digitalWrite(out2[2], HIGH);
    digitalWrite(out3[2], HIGH);
    digitalWrite(out4[2], HIGH);
  }

}

